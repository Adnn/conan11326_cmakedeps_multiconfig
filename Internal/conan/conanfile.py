from conan import ConanFile
from conan.tools.cmake import CMake, CMakeToolchain, cmake_layout
from conan.tools.files import copy

from os import path


class InternalRecipe(ConanFile):
    name = "internal"
    version = "1.0.0"

    settings = "os", "compiler", "build_type", "arch"
    options = {"shared": [True, False], "fPIC": [True, False]}
    default_options = {"shared": False, "fPIC": True}

    generators = "CMakeToolchain"

    build_requires = "cmake/3.27.7"


    def layout(self):
        # Otherwise, root is the subfolder containing conanfile.py
        self.folders.root = ".."
        # Dedicated build folder per compiler
        compiler = str(self.settings.compiler)
        cmake_layout(self, build_folder=f"build-conan-{compiler}{self.settings.get_safe('compiler.version')}")


    def export_sources(self):
        # exports_sources attribute is not rooted in self.folders.root
        # and does not accept paths starting with ".."
        # see: https://github.com/conan-io/conan/issues/14949
        copy(self, "CMakeLists.txt", src="..", dst=self.export_sources_folder)
        copy(self, "Config.cmake.in", src="..", dst=self.export_sources_folder)
        copy(self, "*.h", src="..", dst=self.export_sources_folder)
        copy(self, "*.cpp", src="..", dst=self.export_sources_folder)


    def build(self):
        cmake = CMake(self)
        cmake.configure()
        cmake.build()


    def package(self):
        cmake = CMake(self)
        cmake.install()


    def package_info(self):
        # Disable the config package that would otherwise be generated by CMakeDeps
        self.cpp_info.set_property("cmake_find_mode", "none")
        # Find CMake-generated package config when consuming the (installed) conan package
        self.cpp_info.builddirs = [path.join("lib", "cmake")]
